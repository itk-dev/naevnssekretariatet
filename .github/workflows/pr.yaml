on: pull_request
name: Review
jobs:
  changelog:
    runs-on: ubuntu-latest
    name: Changelog should be updated
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Git fetch
        run: git fetch

      - name: Check that changelog has been updated.
        run: git diff --exit-code origin/${{ github.base_ref }} -- CHANGELOG.md && exit 1 || exit 0

  test-composer-install:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        php: [ '8.1' ]
    name: Validate composer (${{ matrix.php}})
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php}}
          extensions: apcu, ctype, iconv, imagick, json, redis, soap, xmlreader, zip
          coverage: none
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ matrix.php }}-composer-
      - name: Validate composer files
        run: composer validate composer.json
      - name: Composer install with exported .env variables
        run: |
          set -a && source .env && set +a
          APP_ENV=prod composer install --no-dev -o

  unit_tests:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        php: [ '8.1' ]
    name: Unit tests (${{ matrix.php}})
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php}}
          extensions: apcu, ctype, iconv, imagick, json, redis, soap, xmlreader, zip
          coverage: none
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ matrix.php }}-composer-
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Unit tests
        run: ./bin/phpunit --coverage-clover=coverage/unit.xml

  end-to-end-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install site
        run: |
          docker network create frontend
          docker compose up --detach
          docker compose exec phpfpm composer install --no-interaction
          docker compose exec phpfpm bin/console doctrine:migrations:migrate --no-interaction
          docker compose exec phpfpm bin/console hautelook:fixtures:load --no-bundles --purge-with-truncate --no-interaction
          docker compose run --rm node yarn install
          docker compose run --rm node yarn build
      - name: Run cypress
        run: |
          docker compose run --rm cypress run

  php-cs-fixer:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        php: [ '8.1' ]
    name: PHP Coding Standards Fixer (${{ matrix.php }})
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php}}
          extensions: apcu, ctype, iconv, imagick, json, redis, soap, xmlreader, zip
          coverage: none
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ matrix.php }}-composer-
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: php-cs-fixer
        run: phpdbg -qrr ./vendor/bin/php-cs-fixer fix --dry-run

  twigcs:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        php: [ '8.1' ]
    name: Twigcs (${{ matrix.php }})
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php}}
          extensions: apcu, ctype, iconv, imagick, json, redis, soap, xmlreader, zip
          coverage: none
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ matrix.php }}-composer-
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: php-cs-fixer
        run: phpdbg -qrr ./vendor/bin/twigcs templates

  javascript-standard-style:
    runs-on: ubuntu-20.04
    name: JavaScript Standard Style
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: docker network create
        run: docker network create frontend
      - name: yarn install
        run: docker compose run --rm node yarn install
      - name: yarn check-coding-standards/standard
        run: docker compose run --rm node yarn check-coding-standards/standard

  markdownlint:
    runs-on: ubuntu-20.04
    name: markdownlint
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: docker network create
        run: docker network create frontend
      - name: yarn install
        run: docker compose run --rm node yarn install
      - name: yarn check-coding-standards/markdownlint
        run: docker compose run --rm node yarn check-coding-standards/markdownlint

  translations:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        php: [ '8.1' ]
    name: Check translations are up to date (${{ matrix.php}})
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php}}
          extensions: apcu, ctype, iconv, imagick, json, redis, soap, xmlreader, zip
          coverage: none
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ matrix.php }}-composer-
      - name: Composer install with exported .env variables
        run: |
          set -a && source .env && set +a
          APP_ENV=prod composer install --no-dev -o
          APP_ENV=prod DEFAULT_LOCALE=en bin/console translation:extract --force en --prefix=''
          APP_ENV=prod DEFAULT_LOCALE=en bin/console translation:extract --force da
          # Mark default translations (prefixed with `__`) as “Needs work” in Danish translations
          # @fixme Something's not escaped correctly in the following command …
          # sed -i '''' ''s/\<target\>__/\<target state="needs-l10n"\>__/'' translations/*.da.*xlf
      - name: Check for changes in translation files
        run: git diff --diff-filter=ACMRT --exit-code translations

  # @todo Run code analysis
